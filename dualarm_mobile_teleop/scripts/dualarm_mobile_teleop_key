import rospy

from geometry_msgs.msg import Twist

import sys, select, termios, tty

msg = """
---------------------------
w/s : increase/decrease linear_x  by 0.1 m/s
a/d : increase/decrease linear_y  by 0.1 m/s
q/e : increase/decrease angular_z by 0.2 rad/s
space key, k : force stop
anything else : stop smoothly
CTRL-C to quit
"""

Bindings = {
        'q':'increase angular_z by 0.2 rad/s',
        'w':'increase linear_x by 0.1 m/s'
        'e':'decrease angular_z by 0.2 rad/s',
        'a':'increase linear_y by 0.1 m/s',
        's':'decrease linear_x by 0.1 m/s',
        'd':'decrease linear_y by 0.1 m/s'
}

norm_lim = 0.4

def getKey():
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def vels(linear_x, linear_y, angular_z):
    return "Vx: %s\tVy: %s\tWz: %s " % (linear_x, linear_y, angular_z)

if __name__=="__main__":
    settings = termios.tcgetattr(sys.stdin)
    
    rospy.init_node('turtlebot_teleop')
    pub = rospy.Publisher('~cmd_vel', Twist, queue_size=5)

    status = 0
    count = 0
    acc = 0.1
    target_linear_x = 0
    target_linear_y = 0
    target_angular_z = 0
    control_linear_x = 0
    control_linear_y = 0
    control_angular_z = 0
    try:
        print(msg)
        print(vels(target_linear_x, target_linear_y, target_angular_z))
        while(1):
            key = getKey()
            if key in Bindings.keys():
                if key == 'w':
                    target_linear_x += acc
                elif key == 's':
                    target_linear_x -= acc
                elif key == 'a':
                    target_linear_y += acc
                elif key == 'd':
                    target_linear_x -= acc
                elif key == 'q':
                    target_angular_z += acc
                elif key == 'e':
                    target_angular_z -= acc
                count = 0
                target_norm = abs(target_linear_x)+abs(target_linear_y)+abs(target_angular_z)
                if target_norm > norm_lim:
                    scale = norm_lim/target_norm
                    target_linear_x = int(10*target_linear_x*scale)/10.0
                    target_linear_y = int(10*target_linear_y*scale)/10.0
                    target_angular_z = int(10*target_angular_z*scale)/10.0

                print(vels(target_linear_x, target_linear_y, target_angular_z))
                if (status == 14):
                    print(msg)
                status = (status + 1) % 15
            elif key == ' ' or key == 'k' :
                x = 0
                th = 0
                control_linear_x = 0
                control_linear_y = 0
                control_angular_z = 0
            else:
                count = count + 1
                if count > 4:
                    x = 0
                    th = 0
                if (key == '\x03'):
                    break

            if target_linear_x > control_linear_x:
                control_linear_x = min( target_linear_x, control_linear_x + 0.02 )
            elif target_linear_x < control_linear_x:
                control_linear_x = max( target_linear_x, control_linear_x - 0.02 )
            else:
                control_linear_x = target_linear_x

            if target_linear_y > control_linear_y:
                control_linear_y = min( target_linear_y, control_linear_y + 0.02 )
            elif target_linear_y < control_linear_y:
                control_linear_y = max( target_linear_y, control_linear_y - 0.02 )
            else:
                control_linear_y = target_linear_y

            if target_angular_z > control_angular_z:
                control_angular_z = min( target_angular_z, control_angular_z + 0.1 )
            elif target_angular_z < control_angular_z:
                control_angular_z = max( target_angular_z, control_angular_z - 0.1 )
            else:
                control_angular_z = target_angular_z

            twist = Twist()
            twist.linear.x = control_linear_x
            twist.linear.y = control_linear_y
            twist.linear.z = 0
            twist.angular.x = 0
            twist.angular.y = 0
            twist.angular.z = control_angular_z
            pub.publish(twist)

            #print("loop: {0}".format(count))
            #print("target: vx: {0}, wz: {1}".format(target_speed, target_turn))
            #print("publihsed: vx: {0}, wz: {1}".format(twist.linear.x, twist.angular.z))

    except Exception as e:
        print(e)

    finally:
        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        pub.publish(twist)

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)